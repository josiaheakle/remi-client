[{"/home/josiah-eakle/Dev/Full-Apps/reminders/client/src/index.js":"1","/home/josiah-eakle/Dev/Full-Apps/reminders/client/src/reportWebVitals.js":"2","/home/josiah-eakle/Dev/Full-Apps/reminders/client/src/components/App.js":"3","/home/josiah-eakle/Dev/Full-Apps/reminders/client/src/components/Login/EntryPage.js":"4","/home/josiah-eakle/Dev/Full-Apps/reminders/client/src/components/Login/Login.js":"5","/home/josiah-eakle/Dev/Full-Apps/reminders/client/src/components/Login/CreateAccount.js":"6","/home/josiah-eakle/Dev/Full-Apps/reminders/client/src/components/HomePage.js":"7","/home/josiah-eakle/Dev/Full-Apps/reminders/client/src/modules/LoginHandler.js":"8","/home/josiah-eakle/Dev/Full-Apps/reminders/client/src/components/Reminders/ReminderHub.js":"9","/home/josiah-eakle/Dev/Full-Apps/reminders/client/src/components/Reminders/NewReminderForm.js":"10","/home/josiah-eakle/Dev/Full-Apps/reminders/client/src/modules/ReminderHandler.js":"11","/home/josiah-eakle/Dev/Full-Apps/reminders/client/src/modules/TimeZoneHandler.js":"12","/home/josiah-eakle/Dev/Full-Apps/reminders/client/src/modules/VerificationHandler.js":"13","/home/josiah-eakle/Dev/Full-Apps/reminders/client/src/components/VerificationHub.js":"14","/home/josiah-eakle/Dev/Full-Apps/reminders/client/src/components/Reminders/ActiveReminder.js":"15","/home/josiah-eakle/Dev/Full-Apps/reminders/client/src/modules/Scheduler.js":"16","/home/josiah-eakle/Dev/Full-Apps/reminders/client/src/components/AccountHub.js":"17"},{"size":2280,"mtime":1608239666123,"results":"18","hashOfConfig":"19"},{"size":362,"mtime":1607231603958,"results":"20","hashOfConfig":"19"},{"size":2519,"mtime":1610486964153,"results":"21","hashOfConfig":"19"},{"size":4141,"mtime":1608131059770,"results":"22","hashOfConfig":"19"},{"size":2174,"mtime":1610477289872,"results":"23","hashOfConfig":"19"},{"size":5461,"mtime":1610477348337,"results":"24","hashOfConfig":"19"},{"size":6033,"mtime":1610486878652,"results":"25","hashOfConfig":"19"},{"size":5525,"mtime":1610484802017,"results":"26","hashOfConfig":"19"},{"size":3047,"mtime":1608657047076,"results":"27","hashOfConfig":"19"},{"size":7565,"mtime":1610483054990,"results":"28","hashOfConfig":"19"},{"size":3498,"mtime":1610482953484,"results":"29","hashOfConfig":"19"},{"size":7747,"mtime":1607960001668,"results":"30","hashOfConfig":"19"},{"size":3379,"mtime":1610995157237,"results":"31","hashOfConfig":"19"},{"size":4613,"mtime":1610995168605,"results":"32","hashOfConfig":"19"},{"size":1515,"mtime":1610053813717,"results":"33","hashOfConfig":"19"},{"size":845,"mtime":1608222099996,"results":"34","hashOfConfig":"19"},{"size":17358,"mtime":1610479140747,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},"1xfti7i",{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"39"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"39"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"39"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"39"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"39"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"39"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"39"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"39"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"39"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"39"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"39"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"39"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"39"},"/home/josiah-eakle/Dev/Full-Apps/reminders/client/src/index.js",["85"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\n\n\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n// <div>Icons made by <a href=\"https://www.flaticon.com/authors/iconixar\" title=\"iconixar\">iconixar</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div>\n// <div>Icons made by <a href=\"https://www.flaticon.com/authors/freepik\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div>\n// <div>Icons made by <a href=\"https://www.flaticon.com/authors/freepik\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div>\n// <div>Icons made by <a href=\"https://www.flaticon.com/authors/bqlqn\" title=\"bqlqn\">bqlqn</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div>\n// <div>Icons made by <a href=\"https://www.flaticon.com/authors/becris\" title=\"Becris\">Becris</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div>\n// <div>Icons made by <a href=\"https://www.flaticon.com/authors/pixelmeetup\" title=\"Pixelmeetup\">Pixelmeetup</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div>\n// <div>Icons made by <a href=\"https://www.flaticon.com/authors/freepik\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div>\n// <div>Icons made by <a href=\"https://www.flaticon.com/authors/smashicons\" title=\"Smashicons\">Smashicons</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div>\n// <div>Icons made by <a href=\"https://www.flaticon.com/authors/pixel-perfect\" title=\"Pixel perfect\">Pixel perfect</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div>\n\n\n\n\n// TODO - add google analytics\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals(console.log);\n",["86","87"],"/home/josiah-eakle/Dev/Full-Apps/reminders/client/src/reportWebVitals.js",[],"/home/josiah-eakle/Dev/Full-Apps/reminders/client/src/components/App.js",["88","89"],"// react \nimport { Component, useEffect, useState } from \"react\"\nimport { BrowserRouter as Router, Switch, Route, Redirect } from \"react-router-dom\"\nimport { ToastContainer } from \"react-toastify\"\n\n// components\nimport EntryPage from \"./Login/EntryPage.js\"\nimport HomePage from \"./HomePage.js\"\n\n// media\nimport bgImg from \"../media/coffee-and-map.jpg\"\n\n// modules\nimport LoginHandler from \"../modules/LoginHandler.js\"\nimport ReminderHandler from \"../modules/ReminderHandler.js\"\n\n// css\nimport 'react-toastify/dist/ReactToastify.css';\nimport \"../styles/style.css\"\n\nconst App = () => {\n\n  const [ user, setUser ] = useState(undefined);\n  const [ isUserLoggedIn, setUserLoggedIn ] = useState(false);\n  const [ reminders, setReminders ] = useState(undefined)\n\n  const updateUser = (newUser) => {\n    console.log(`updated user `)\n    console.log(newUser)\n    setUser(newUser)\n  }\n\n  const updateLoggedInStatus = () => {\n    if(user !== undefined) {\n      setUserLoggedIn(true)\n    } else {\n      setUserLoggedIn(false)\n    }\n  }\n\n  const getAllUserReminders = async () => {\n    const rems = await ReminderHandler.getAllReminders()\n\n    console.log(`reminders:`)\n    console.log(rems)\n\n    setReminders(rems)\n  }\n\n  LoginHandler.setUserUpdateCallback(updateUser)\n  ReminderHandler.setUpdateReminderCallback(getAllUserReminders)\n\n\n  useEffect(() => {\n    console.log(`user updated at app`)\n    console.log(user)\n    updateLoggedInStatus();\n  }, [user])\n\n  useEffect(() => {\n    if(isUserLoggedIn === true) {\n      getAllUserReminders()\n    }\n  }, [isUserLoggedIn])\n\n  \n\n  return (\n    <div className='App' style={{ backgroundImage: `url(${bgImg})` }}>\n    <ToastContainer position=\"bottom-right\" autoClose={5000} hideProgressBar newestOnTop={false} closeOnClick rtl={false} pauseOnFocusLoss draggable pauseOnHover />\n      <Router>\n        {(isUserLoggedIn===false) ? <Redirect to='/login' /> : null}\n          <Switch>\n            <Route exact path=\"/\">\n              {(!user || user === {})? <Redirect to='/login' />:<Redirect to='/home' />}\n            </Route>\n            <Route path=\"/login\">\n              {(isUserLoggedIn===true)?<Redirect to='/home'/>:null}\n              <EntryPage />\n            </Route>\n            <Route path=\"/home\">\n              <HomePage user={user} reminders={reminders} />\n            </Route>\n            {/* <Route path=\"/reminders\">\n              <ReminderHub reminders={reminders} />\n            </Route> */}\n\n          </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","/home/josiah-eakle/Dev/Full-Apps/reminders/client/src/components/Login/EntryPage.js",["90","91"],"\nimport { useState, useEffect } from \"react\"\n\nimport ghIcon from \"../../media/GitHubIconLight.png\"\nimport backIcon from \"../../media/back.png\"\n\nimport \"../../styles/EntryPage.css\"\n\nimport Login from \"./Login.js\"\nimport CreateAccount from \"./CreateAccount.js\"\n\nconst EntryPage = (  ) => {\n\n    const [createAccountOpen, setCreateAccountOpen] = useState(false)\n    const [introText, setIntroText] = useState('');\n    const [stopAnimation, setStopAnimation] = useState(false)\n\n    let fullIntroText = 'Hello, my name is Remi. I can help you schedule text remiders and create checklists. Login or create an account and we can get started!';\n    let introTextPlaceholder = '';\n    let i = 0;\n    const animateNextLetter = (pauseBool) => {\n        if(i<=fullIntroText.length) {\n            setIntroText(introTextPlaceholder)\n            setTimeout(() => {\n                if(!pauseBool) introTextPlaceholder = `${introTextPlaceholder}${fullIntroText[i++]}`\n                else pauseBool = false;\n                if(fullIntroText[i] === '.') pauseBool = true;\n                if(!stopAnimation) animateNextLetter();\n            }, 100)\n        }\n    }\n\n    const createAccount = () => {\n\n        const loginHeader = document.querySelector('.login-main-header')\n        loginHeader.classList.add('create-account')\n\n        const container = document.querySelector('.entry-container-grid')\n        container.classList.remove('alert-message-on')\n        setCreateAccountOpen(true);\n    }\n\n    const closeCreateAccount = () => {\n\n        const loginHeader = document.querySelector('.login-main-header')\n        loginHeader.classList.remove('create-account')\n\n\n        const container = document.querySelector('.entry-container-grid')\n        container.classList.remove('alert-message-on')   \n        setCreateAccountOpen(false);\n    }\n\n    useEffect(() => {\n        animateNextLetter();\n        return () => {\n            setStopAnimation(true)\n        }\n    }, [])\n\n    return (\n        <div className='EntryPage' >\n\n            <div className='entry-center-container'>\n                <div id='intro-text-container'>\n                    <div id='intro-text'>\n                        {introText}\n                    </div>\n                </div>\n\n                <div className={`entry-container-grid ${(!createAccountOpen) ? 'login' : 'create-account'}`}>\n                    {(createAccountOpen)?\n                        <div className='go-back-button-container'>\n                            {/* <button onClick={closeCreateAccount} type='button' className='go-back-button'><i className='material-icons'>arrow_back</i></button> */}\n                            <button onClick={closeCreateAccount} type='button' className='go-back-button'><img id='go-back-image' src={backIcon}></img></button>\n\n                        </div>\n                    :null}\n                    <div className='login-container-header'>\n                        <h2 className=\"login-main-header\"> {(!createAccountOpen)? `login` : `new account`} </h2>\n                    </div>\n\n                    {(createAccountOpen === false) ?\n                        <div className='create-account-closed'>\n                            <Login />\n                            <div className='create-account-container login-container'>\n                                <h3 className='login-header'>Need an account?</h3>\n                                <button onClick={createAccount}> Create Account </button>\n                            </div>\n                        </div>\n                        :\n                        <CreateAccount />\n                    }\n\n                </div>\n            </div>\n\n            <span className='created-by-footer'>Created by\n                <a className='footer-link' href=\"https://josiaheakle.com\" title=\"Josiah Eakle Portfolio\">\n                    Josiah Eakle\n                </a>\n                <a href=\"https://github.com/josiaheakle/reminder-client\" title=\"Github\">\n                    <img className='je-icon' src={ghIcon} alt='GitHub Icon' />\n                </a>\n            </span>\n\n        </div>\n    );\n}\n\nexport default EntryPage;","/home/josiah-eakle/Dev/Full-Apps/reminders/client/src/components/Login/Login.js",["92","93","94"],"import { useState } from \"react\"\nimport { toast } from \"react-toastify\"\nimport LoginHandler from \"../../modules/LoginHandler.js\"\n\nconst Login = (props) => {\n\n    // props \n    //  loginSuccess ()\n    //      parent callback to tell entry page login is complete\n\n    const [ email, setEmail ] = useState('')\n    const [ password, setPassword ] = useState('')\n    const [ alertMessage, setAlertMessage ] = useState('')\n\n\n    const updateValue = (e) => {\n        switch(e.target.id) {\n            case('email-input'):\n                setEmail(e.target.value)\n                break;\n            case('password-input'):\n                setPassword(e.target.value)\n                break;\n        }\n    }\n\n    const onLogin = async (e) => {\n        e.preventDefault();\n        const res = await LoginHandler.loginUser(email, password)\n        console.log(`responce from login handler`)\n        console.log(res)\n        toast(res)\n    }\n\n    // const setAlert = (str) => {\n    //     const container = document.querySelector('.entry-container-grid')\n    //     container.classList.add('alert-message-on')\n    //     setAlertMessage(str);\n    //     // const alertMessageDom = document.querySelector('.alert-message')\n    //     // alertMessageDom.classList.add('mounting')\n    //     // setTimeout(() => {\n    //     //     alertMessageDom.classList.remove('mounting')\n    //     // }, 2000)\n    // }\n\n    return(\n        <div>\n            {(alertMessage == '')?null:<div className='alert-message'>{alertMessage}</div>}\n            <form onSubmit={onLogin} className='login-form' >\n                <label htmlFor='email-input'>Email</label>\n                <input className='login-input' onChange={updateValue} id='email-input' name='Email' type='email' autoComplete='email' required={true} ></input>\n                <label htmlFor='password-input'>Password</label>\n                <input className='login-input' onChange={updateValue} id='password-input' name='Password' type='password' autoComplete='password' required={true} ></input>\n                <button className='login-button' type='submit'>Login</button>\n            </form>\n        </div>\n    );\n}\n\nexport default Login;","/home/josiah-eakle/Dev/Full-Apps/reminders/client/src/components/Login/CreateAccount.js",["95","96","97"],"import { useState, useEffect } from \"react\"\nimport { toast } from \"react-toastify\"\nimport LoginHandler from \"../../modules/LoginHandler.js\"\nimport TimeZoneHandler from \"../../modules/TimeZoneHandler.js\"\n\nconst CreateAccount = (props) => {\n\n    // props \n    //  goBack () \n    //      parent callback when user goes back instead of creating account\n\n    const [ username, setUsername ] = useState('')\n    const [ email, setEmail ] = useState('')\n    const [ phoneNum, setPhoneNum ] = useState('')\n    const [ password, setPassword ] = useState('')\n    const [ passVerify, setPassVerify ] = useState('')\n    const [ time_zone, setTimeZone] = useState('UTC')\n\n\n    const [ alertMessage, setAlertMessage ] = useState('')\n\n    const passRequirements = (pass) => {\n        // Requirements - must have at least one uppercase, one lowercase, and one number\n\n        let hasUpper = false, hasLower = false, hasNum = false;\n        for (let i=0; i<pass.length; i++) {\n            // console.log(pass[i])\n\n            let code = pass.charCodeAt(i)\n\n            if(pass[i] > '0' && pass[i] < '9') hasNum = true;\n            else if(code >= 65 && code <= 90) hasUpper = true;\n            else if(code >= 97 && code <= 122) hasLower = true;\n\n\n        }\n\n        if(hasUpper && hasLower && hasNum) return true\n        else return false\n\n    }\n\n    const updateValue = (e) => {\n        switch(e.target.id) {\n            case('email-input'):\n                setEmail(e.target.value)\n                break;\n            case('password-input'):\n                setPassword(e.target.value)\n                break;\n            case('name-input'):\n                setUsername(e.target.value)    \n                break;\n            case('password-verify-input'):\n                setPassVerify(e.target.value)\n                break;\n            case('phone-input'):\n                setPhoneNum(e.target.value)\n                break;\n            case('time-zone-input'):\n                setTimeZone(e.target.options[e.target.selectedIndex].text)\n\n        }\n    }\n\n    const onCreateAccount = async (e) => {\n        e.preventDefault();\n\n        if(password !== passVerify) {\n            toast('Passwords do not match, please try again.')\n        } else if (password.length<8) {\n            toast('Password must be at least 8 characters.')\n        } else if (!passRequirements(password)) {\n            toast('Password must have at least one uppercase, one lowercase, and one number.')\n        }else {\n            const res = await LoginHandler.createUser(email, phoneNum, username, password, time_zone)\n            toast(res)\n        }\n    }\n\n    // const setAlert = (str) => {\n    //     setAlertMessage(str);\n    //     const container = document.querySelector('.entry-container-grid')        \n    //     if(container) container.classList.add('alert-message-on')\n    //     setAlertMessage(str);\n    //     const alertMessageDom = document.querySelector('.alert-message')\n    //     if(alertMessageDom) {\n    //         alertMessageDom.classList.add('mounting')\n    //         setTimeout(() => {\n    //             alertMessageDom.classList.remove('mounting')\n    //         }, 2000)\n    //     }\n    // }\n\n    const importTimeZones = async () => {\n        const timeZoneSelector = document.getElementById('time-zone-input')\n        let timezones = await TimeZoneHandler.getTimeZones()\n        timezones.forEach(tz => {\n            const op = document.createElement('option')\n            op.value = tz\n            op.textContent = tz\n            timeZoneSelector.appendChild(op)\n        })\n    }\n\n    useEffect(() => {\n        importTimeZones()\n    }, [])\n\n    return(\n        <div>\n            {(alertMessage == '')?null:<div className='alert-message'>{alertMessage}</div>}\n            <form onSubmit={onCreateAccount} className='login-form create-account-form'>\n                <label id='name-input-label' htmlFor='name-input'>Name</label>\n                <input className='login-input' onChange={updateValue} id='name-input' name='Display Name' type='text' autoComplete='username' required={true}></input>\n                <label htmlFor='email-input'>Email</label>\n                <input className='login-input' onChange={updateValue} id='email-input' name='Email' type='email' autoComplete='email' required={true}></input>\n                <label htmlFor='phone-input'>Phone Number</label>\n                <input className='login-input' onChange={updateValue} id='phone-input' name='Phone Number' type='tel' autoComplete='tel' required={true}></input>\n                <label htmlFor='time-zone-input'> Time Zone </label>\n                <select className='login-input' onChange={updateValue} name='Time Zone' id='time-zone-input'>\n                    <option value='UTC'> --select timezone-- </option>\n                </select>\n                <label htmlFor='password-input'>Password</label>\n                <input className='login-input' onChange={updateValue} id='password-input' name='Password' type='password' autoComplete='password' required={true}></input>\n                <label htmlFor='password-verify-input'>Verify Password </label>\n                <input className='login-input' onChange={updateValue} id='password-verify-input' name='Password Verification' type='password' autoComplete='off' required={true}></input>\n                <button className='login-button' type='submit'>Submit</button>\n            </form>\n        </div>\n    );\n}\n\nexport default CreateAccount;","/home/josiah-eakle/Dev/Full-Apps/reminders/client/src/components/HomePage.js",["98","99","100","101","102","103","104","105","106","107"],"// import LoginHandler from \"../modules/LoginHandler.js\"\nimport { Link } from \"react-router-dom\"\n\nimport { useState, useEffect } from \"react\"\n\nimport '../styles/HomePage.css'\nimport VerificationHandler from \"../modules/VerificationHandler.js\"\nimport VerificationHub from \"./VerificationHub.js\"\nimport ReminderHub from './Reminders/ReminderHub.js'\nimport AccountHub from './AccountHub.js'\n\nimport reminderIcon from \"../media/reminders.png\"\nimport accountIcon from \"../media/user_transparent.png\"\nimport ghIcon from \"../media/GitHubIconLight.png\"\n\n\nconst HomePage = (props) => {\n\n    // props - user, reminders\n\n    const [introText, setIntroText] = useState('');\n    const [stopAnimation, setStopAnimation] = useState(false);\n    const [isUserVerified, setUserVerified] = useState(false);\n\n    const [selectedPage, setSelectedPage] = useState('reminders') // reminders, account\n\n    let fullIntroText = '';\n\n    const updateIntroText = () => {\n        if (props.user) {\n            setUserVerified((!!props.user.phone_number_verified && !!props.user.email_verified))\n            if (!props.user.phone_number_verified && !props.user.email_verified) {\n                fullIntroText = `Welcome${(props.user) ? `, ${props.user.username}!` : '!'} Now before we can get started, you will need to verify your phone number and email or I won't be able to send any reminders. Click the buttons below to begin the verification process.`;\n            } else if (!props.user.phone_number_verified && props.user.email_verified) {\n                fullIntroText = `Welcome${(props.user) ? `, ${props.user.username}!` : '!'} Before I can send any text reminders, you will need to verify your phone number. Press the button below to start.`;\n            } else if (props.user.phone_number_verified && !props.user.email_verified) {\n                fullIntroText = `Welcome${(props.user) ? `, ${props.user.username}!` : '!'} Before I can send any email reminders, you will need to verify your email. Press the button below to start.`;\n            } else {\n                fullIntroText = `Welcome${(props.user) ? `, ${props.user.username}!` : '!'}`;\n            }\n        } else {\n            fullIntroText = `Welcome!`;\n        }\n    }\n\n    let introTextPlaceholder = '';\n    let i = 0;\n    const animateNextLetter = (pauseBool) => {\n        if (i <= fullIntroText.length) {\n            setIntroText(introTextPlaceholder)\n            setTimeout(() => {\n                if (!pauseBool) introTextPlaceholder = `${introTextPlaceholder}${fullIntroText[i++]}`\n                else pauseBool = false;\n                if (fullIntroText[i] === '.') pauseBool = true;\n                if (!stopAnimation) animateNextLetter();\n            }, 80)\n        }\n    }\n\n    const changePage = (e) => {\n\n        console.log(`Changing Page: `, e.target)\n\n        switch(e.target.id) {\n            case('page-selection-reminders'):\n                setSelectedPage('reminders')\n\n                break;\n            case('page-selection-account'):\n                setSelectedPage('account')\n                break;\n        }\n    }\n\n    // const sendVerificationText = () => {\n    //     const phoneNum = props.user.phone_number;\n    //     VerificationHandler.sendVerificationText(phoneNum)\n    // }\n\n    // const sendVerificationEmail = () => {\n\n    // }\n\n    // useEffect(() => {\n    //     console.log(`is user verified? ${isUserVerified}` )\n    // }, [isUserVerified])\n\n    useEffect(() => {\n\n        const reminderSelection = document.getElementById('page-selection-reminders')\n        const accountSelection = document.getElementById('page-selection-account')\n\n        switch(selectedPage) {\n            case('reminders'):\n                accountSelection.classList.remove('selected')\n                reminderSelection.classList.add('selected')\n                break;\n            case('account'):\n                accountSelection.classList.add('selected')\n                reminderSelection.classList.remove('selected')\n                break;\n        }\n\n    }, [selectedPage])\n\n    useEffect(() => {\n        console.log(`user changed at homepage`)\n        console.log(props.user)\n    }, [props.user])\n\n    useEffect(() => {\n        updateIntroText();\n        return () => {\n            setStopAnimation(true)\n        }\n    }, [])\n\n    useEffect(() => {\n        if (fullIntroText !== '') {\n            animateNextLetter();\n        }\n    }, [introText])\n\n    return (\n        <div className=\"HomePage\">\n\n            <div className='visual-container'>\n\n                <div className='remi-text-container'>\n                    {introText}\n                </div>\n\n                {/* {(isUserVerified === false) ? <VerificationHub user={props.user} /> : null} */}\n\n\n                <div className='page-selector'>\n                    <div onClick={changePage} title='Reminders' className='page-selection selected' id='page-selection-reminders'>\n                        <img className='page-selection-image' src={reminderIcon} id='page-selection-reminders' />\n                    </div>\n                    <div onClick={changePage} title='Account' className='page-selection' id='page-selection-account'>\n                        <img className='page-selection-image' src={accountIcon} id='page-selection-account' />\n                    </div>\n                </div>\n                \n                {(selectedPage==='reminders')?<ReminderHub user={props.user} reminders={props.reminders} /> : (selectedPage==='account')? <AccountHub user={props.user} /> :null}\n                \n\n            </div>\n\n            <span className='created-by-footer'>Created by\n                <a className='footer-link' href=\"https://josiaheakle.com\" title=\"Josiah Eakle Portfolio\">\n                    Josiah Eakle\n                </a>\n                <a href=\"https://github.com/josiaheakle/reminder-client\" title=\"Github\">\n                    <img className='je-icon' src={ghIcon} alt='GitHub Icon' />\n                </a>\n            </span>\n\n        </div>\n    );\n}\n\nexport default HomePage;","/home/josiah-eakle/Dev/Full-Apps/reminders/client/src/modules/LoginHandler.js",["108"],"\nconst axios = require('axios')\nrequire('dotenv').config();\n\nconst LoginHandler = (() => {\n\n    const apiUrl = process.env.REACT_APP_API_URL;\n    let _currentUser = {}\n    let _userUpdateCallback = undefined;\n\n    const loginUser = async (email, password) => {\n\n        const options = {\n            url: `${apiUrl}/user/login`,\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json;charset=UTF-8'\n            },\n            data: {\n                'email': email,\n                'password': password\n            }\n        }\n\n        const res = await axios(options)\n        console.log(res)\n\n        if(res.data.user) {\n            _currentUser = res.data.user\n            _onUserUpdate()\n        }\n        return res.data.message\n\n    }\n\n    const createUser = async (email, phone_number, username, password, time_zone) => {\n        const options = {\n            url: `${apiUrl}/user/new`,\n            method: 'POST',\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json;charset=UTF-8'\n            },\n            data: {\n                'email': email,\n                'phone_number': phone_number,\n                'username': username,\n                'password': password,\n                'time_zone': time_zone\n            }\n        }\n\n        const res = await axios(options)\n\n        if(res.data.user) {\n            _currentUser = res.data.user\n            _onUserUpdate();\n        }\n\n        return res.data.message;\n    }\n\n    const updateUserInfo = async (field, value) => {\n\n        console.log(`update user info (${field}, ${value})`)\n\n        const options = {\n            url: `${apiUrl}/user/update`,\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json;charset=UTF-8'\n            },\n            data: {\n                'field': field,\n                'value': value,\n                'user': _currentUser._id\n            }\n        }\n\n        try {\n\n            const res = await axios(options) \n            console.log(res)\n            if(res.data.type === 'SUCCESS') {\n                if(field === 'email') {\n                    _currentUser.email_verified = false\n                } else if (field === 'phone_number') {\n                    _currentUser.phone_number_verified = false\n                }\n                _currentUser[field] = value\n                _onUserUpdate()\n            } else {\n                throw {\n                    type: res.data.type,\n                    message: res.data.message\n                }\n            }\n            return res.data.message\n\n        } catch (err) {\n            return err\n        }\n\n\n    }\n\n    const updateUserPassword = async (oldPass, newPass) => {\n        const options = {\n            url: `${apiUrl}/user/update`,\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json;charset=UTF-8'\n            },\n            data: {\n                'field': 'password',\n                'value': newPass,\n                'user': _currentUser._id,\n                'password': oldPass\n            }\n        }\n\n        const res = await axios(options) \n        return res.data.message\n\n    }\n\n    const updateUserVerificationInfo = async () => {\n        const options = {\n            url: `${apiUrl}/verify/info/${_currentUser._id}`,\n            method: 'get',\n            headers: {\n              'Accept': 'application/json',\n            }\n        }\n\n        const res = await axios(options)\n\n        console.log(`updateuserverification - loginhandler, res: `,res)\n\n        if(res.status === 200) {\n            _currentUser.email_verified = res.data.email_verified\n            _currentUser.phone_number_verified = res.data.phone_number_verified\n            _onUserUpdate()\n        }\n\n        return res.data.message\n\n    }\n\n    const deleteUser = async (password) => {\n\n        let userId = _currentUser._id\n\n        const options = {\n            url: `${apiUrl}/user/delete`,\n            method: \"post\",\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json;charset=UTF-8'\n            },\n            data: {\n                user: userId,\n                password: password\n            }\n        }\n\n        const res = await axios(options)\n        console.log('Delete user responce: ')\n        console.log(res)\n\n        if(res.data.success === true) {\n            _currentUser = undefined;\n            _onUserUpdate()\n        }\n\n        return res.data.message\n    }\n\n    const logoutUser = () => {\n        _currentUser = undefined;\n        _onUserUpdate();\n        \n    }\n\n    const _onUserUpdate = () => {\n        _userUpdateCallback(_currentUser)\n    }\n\n    const setUserUpdateCallback = (callback) => {\n        _userUpdateCallback = callback;\n    }\n\n    const getCurrentUser = () => {\n        return _currentUser;\n    }\n\n    \n\n    return {\n        createUser: createUser,\n        loginUser: loginUser,\n        deleteUser: deleteUser,\n        logoutUser: logoutUser,\n        updateUserInfo: updateUserInfo,\n        getCurrentUser: getCurrentUser,\n        setUserUpdateCallback: setUserUpdateCallback,\n        updateUserVerificationInfo: updateUserVerificationInfo,\n        updateUserPassword: updateUserPassword\n    }\n\n\n})(); \n\nexport default LoginHandler;","/home/josiah-eakle/Dev/Full-Apps/reminders/client/src/components/Reminders/ReminderHub.js",["109"],"\n\nimport { useEffect, useState } from \"react\";\nimport NewReminderForm from \"./NewReminderForm.js\"\nimport ActiveReminder from \"./ActiveReminder.js\"\n\nimport '../../styles/ReminderHub.css'\nimport ReminderHandler from \"../../modules/ReminderHandler.js\";\n\nconst ReminderHub = (props) => {\n\n    // props - user, reminders\n\n    const [ reminderToUpdate, setReminderToUpdate ] = useState(undefined)\n    const [ verifyDelete, setVerifyDelete ] = useState(false)\n    const [ reminderToDelete, setReminderToDelete ] = useState(undefined)\n    const [ editClicked, setEditClicked ] = useState(false)\n\n    // selectedpage - reminders, account, settings\n\n    // useEffect(() => {\n    //     if(props.reminders) {\n    //         setReminders(props.reminders)\n    //     }\n    // }, [])\n\n    const editReminder = (rem) => {\n        setReminderToUpdate(rem)\n        setEditClicked(true)\n        setTimeout(() => {\n            setEditClicked(false)\n        }, 200)\n    }\n\n    const deleteReminder = (rem) => {\n        setReminderToDelete(rem)\n        setVerifyDelete(true)\n    }\n\n    const yesDelete = () => {\n        ReminderHandler.deleteReminder(reminderToDelete._id)\n        // setReminderToUpdate(undefined)\n        \n        reminderDoneEditing()\n        setReminderToDelete(undefined)\n        setVerifyDelete(false)\n    }\n\n    const noDelete = () => {\n        setReminderToDelete(undefined)\n        reminderDoneEditing()\n        // setReminderToUpdate(undefined)\n        setVerifyDelete(false)\n    }\n \n    const reminderDoneEditing = () => {\n        setReminderToUpdate(undefined)\n        setEditClicked(true)\n        setTimeout(() => {\n            setEditClicked(false)\n        }, 200)\n    }\n\n\n    return(\n        <div className='ReminderHub'>\n\n            {(verifyDelete === true)? \n            <div className='verify-modal-background'>\n                <div className='verify-modal'>\n                    <div className='verify-delete-modal-header'> Are you sure you want to delete this reminder? </div>\n\n                    <div className='verify-delete-modal-button-container'>\n                        <button onClick={yesDelete} className='verify-delete-modal-button' id='yes-delete-button'> Delete </button>\n                        <button onClick={noDelete} className='verify-delete-modal-button' id='no-delete-button'> Cancel </button>\n                    </div>\n                </div> \n            </div>\n            :null}\n\n            <div className='all-user-reminders'>\n                <div className='all-user-reminders-header'> Active Reminders </div>\n\n                {(props.reminders) ? props.reminders.map((r,i) => {\n                    return <ActiveReminder editReminder={editReminder} deleteReminder={deleteReminder} key={i} reminder={r} />\n                }):null}\n\n            </div>\n\n            {(reminderToUpdate !== undefined) ? <NewReminderForm reminder={reminderToUpdate} refresh={editClicked} submitted={reminderDoneEditing} cancelEdit={verifyDelete} /> : <NewReminderForm />}\n\n        </div>\n    );\n}\n\nexport default ReminderHub;","/home/josiah-eakle/Dev/Full-Apps/reminders/client/src/components/Reminders/NewReminderForm.js",["110","111","112","113","114","115"],"import { useEffect, useState } from \"react\";\nimport ReminderHandler from \"../../modules/ReminderHandler.js\"\nimport TimeZoneHandler from \"../../modules/TimeZoneHandler.js\"\nimport ReminderHub from \"./ReminderHub.js\";\n\nimport cancelIcon from \"../../media/error.png\"\n\nconst moment = require('moment')\n\n    /*\n  const newReminder = {\n    title: req.body.title,\n    start_date: req.body.startdate,\n    frequency: req.body.frequency,\n    text_string: req.body.description || undefined,\n    link: req.body.link || undefined\n  }\n    */\n\nconst NewReminderForm = (props) => {\n\n    // props - reminder = object (IF YOU ARE EDITING A REMINDER), refresh = bool, if true refresh edit values, submitted: callback(), cancelEdit = bool, if true cancelEdit\n\n    const [ editingReminder, setEditingReminder ] = useState(false)\n\n    const [ title, setTitle ] = useState(undefined)\n    const [ start_date, setStartDate ] = useState(undefined)\n    const [ frequency, setFrequency ] = useState('Once')\n    const [ reminderType, setReminderType ] = useState('text')\n    const [ text, setTextString ] = useState(undefined)\n\n    const updateValue = (e) => {\n        switch(e.target.id) {\n            case('title-input'):\n                setTitle(e.target.value)\n                break;\n            case('text-string-input'):\n                setTextString(e.target.value)\n                break;\n            case('start-date-input'):\n                setStartDate(e.target.value)    \n                break;\n            case('frequency-input'):\n                setFrequency(e.target.options[e.target.selectedIndex].text)\n                break;\n            case('reminder-type-input'):\n                setReminderType(e.target.options[e.target.selectedIndex].text)\n                break;\n        }\n    }\n\n    const submitForm = async (e) => {\n        e.preventDefault();\n        e.target.reset()\n        if(!props.reminder) {\n            const res = await ReminderHandler.createReminder({\n                title: title,\n                start_date: start_date,\n                freq: frequency,\n                text: text,\n                type: reminderType\n            })\n            console.log(res)\n        } else {\n            props.submitted()\n\n            const newRem = {\n                title: title,\n                start_date: start_date,\n                freq: frequency,\n                text: text,\n                type: reminderType\n            }\n\n            const res = await ReminderHandler.editReminder(props.reminder._id, newRem)\n            setEditingReminder(false)\n            console.log(res)\n            ReminderHandler.updateReminders()\n        }\n    }\n\n    const updateEditValues = () => {\n\n        const titleInput = document.getElementById('title-input')\n        const textInput = document.getElementById('text-string-input')\n        const dateInput = document.getElementById('start-date-input')\n        const freqInput = document.getElementById('frequency-input')\n        const typeInput = document.getElementById('reminder-type-input')\n\n        const title = props.reminder.title || ''\n        const text = props.reminder.text || ''\n        const date = props.reminder.next_date || ''\n        const freq = props.reminder.freq || 'Once'\n        const type = props.reminder.type || 'Text'\n\n        setTitle(title)\n        setTextString(text)\n        setStartDate(date)\n        setFrequency(freq)\n        setReminderType(type)\n\n        titleInput.value = title\n        textInput.value = text\n        dateInput.value = moment(date).format(\"YYYY-MM-DDTHH:mm:ss\")\n        freqInput.value = freq\n        typeInput.value = type\n\n    }\n\n    const cancelEdit = () => {\n\n        const reminderForm = document.querySelector('.new-reminder-form')\n        reminderForm.reset()\n\n        setEditingReminder(false)\n        props.submitted()\n\n    }\n\n\n\n    useEffect(() => {\n        if(editingReminder === true) updateEditValues()\n    }, [editingReminder])\n\n    useEffect(() => {\n        if(props.reminder) {\n            setEditingReminder(true)\n        } else {\n            setEditingReminder(false)\n        }   \n        if(props.refresh) {\n            if(props.refresh === true) updateEditValues()\n        }\n        if(props.cancelEdit){\n            if(props.cancelEdit === true) cancelEdit()\n        }\n\n    }, [props])\n\n    return (\n        <div className='NewReminderForm'>\n            {(editingReminder===true)?\n\n                <div className='new-reminder-form-header'> \n                    <span className='form-header-text'> Editing Reminder </span>\n                    <div className='new-reminder-button-container'>\n                        <button onClick={cancelEdit} className='new-reminder-icon-button icon-button' > \n                            <img className='new-reminder-icon' src={cancelIcon} /> \n                        </button>\n                    </div>\n                </div>\n            :\n                <div className='new-reminder-form-header'> \n                    <span className='form-header-text'> New Reminder </span>\n                </div>\n            }\n            <form className='new-reminder-form' onSubmit={submitForm}>\n                <label className='new-reminder-label' id='title-input-label' htmlFor='name-input'>Title</label>\n                <input className='new-reminder-input' onChange={updateValue} id='title-input' name='Title' type='text' required={true}>\n                </input>\n                <label className='new-reminder-label' htmlFor='text-string-input'>Reminder</label>\n                <textarea className='new-reminder-input large' onChange={updateValue} id='text-string-input' name='Description' type='text' required={false}>\n                </textarea>\n                <label className='new-reminder-label' htmlFor='start-date-input'>Date</label>\n                <input className='new-reminder-input' onChange={updateValue} id='start-date-input' name='Start Date' type='datetime-local' required={true}>\n                </input>\n                <div className='align-horizontal'>\n                    <div className='align-vertical'>\n                        <label className='new-reminder-label' htmlFor='frequency-input'>Frequency</label>\n                        <select className='new-reminder-input small' onChange={updateValue} name='Frequency' id='frequency-input' required={true}>\n                            <option value='Once'>Once</option>\n                            <option value='Daily'>Daily</option>\n                            <option value='Weekly'>Weekly</option>\n                            <option value='Bi-Weekly'>Bi-Weekly</option>\n                            <option value='Monthly'>Monthly</option>\n                            <option value='Yearly'>Annually</option>\n                        </select>\n                    </div>\n                    <div className='align-vertical'>\n                        <label className='new-reminder-label' htmlFor='reminder-type-input'>Type</label>\n                        <select className='new-reminder-input small' onChange={updateValue} name='Reminder Type' id='reminder-type-input' required={true}>\n                            <option value='Text'>Text</option>\n                            <option value='Email'>Email</option>\n                            <option value='Both'>Both</option>\n                        </select>\n                    </div>\n                </div>\n\n                \n                <button className='new-reminder-input button' type='submit'> Submit </button>\n            </form>\n        </div>\n    );\n}\n\nexport default NewReminderForm;","/home/josiah-eakle/Dev/Full-Apps/reminders/client/src/modules/ReminderHandler.js",["116","117"],"import { Component } from \"react\";\nimport Login from \"../components/Login/Login.js\";\nimport LoginHandler from \"./LoginHandler.js\"\nimport Scheduler from \"./Scheduler.js\"\n\nconst axios = require('axios')\nrequire('dotenv').config();\n\n\n\nconst ReminderHandler = (() => {\n\n    const apiUrl = process.env.REACT_APP_API_URL;\n\n    /*\n  const newReminder = {\n    title: req.body.title,\n    startdate: req.body.startdate,\n    frequency: req.body.frequency,\n    description: req.body.description || undefined,\n    link: req.body.link || undefined\n  }\n    */\n\n    let _callback = undefined;\n\n    const setUpdateReminderCallback = (callback) => {\n        _callback = callback\n    }\n\n    const updateReminders = () => {\n        _callback()\n    }\n\n    const createReminder = async (reminderObj) => {\n\n        // console.log(`REMINDER:`)\n        // console.log(reminderObj)\n\n        const currentUser = LoginHandler.getCurrentUser()\n        // console.log(`userId: ${currentUser._id}`)\n        const options = {\n            url: `${apiUrl}/reminder/new`,\n            method: 'POST',\n            headers: {\n              'Accept': 'application/json',\n              'Content-Type': 'application/json;charset=UTF-8'\n            },\n            data: {            \n                'title': reminderObj.title,\n                'start_date': reminderObj.start_date,\n                'freq': reminderObj.freq,\n                'text': reminderObj.text,\n                'time_zone': currentUser.time_zone,\n                'user': currentUser._id,\n                'type': reminderObj.type\n            }\n        }\n\n        \n        const res = await axios(options)\n        updateReminders()\n        return res\n    }\n\n    const deleteReminder = async (id) => {\n        const options = {\n            url: `${apiUrl}/reminder/delete/${id}`,\n            method: 'GET'\n        }\n        const res = await axios(options)\n        updateReminders()\n        return res.data\n    }\n\n    const editReminder = async (id, reminderObj) => {\n\n        const currentUser = LoginHandler.getCurrentUser()\n\n        const options = {\n            url: `${apiUrl}/reminder/update/${id}`,\n            method: 'POST',\n            headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json;charset=UTF-8'\n            },\n            data: {            \n                'title': reminderObj.title,\n                'start_date': reminderObj.start_date,\n                'next_date': reminderObj.next_date,\n                'freq': reminderObj.freq,\n                'text': reminderObj.text,\n                'time_zone': currentUser.time_zone,\n                'user': currentUser._id,\n                'type': reminderObj.type\n            }\n        }\n\n        const res = await axios(options)\n        updateReminders()\n        return res\n    }\n\n    const getAllReminders = async () => {\n\n        const currentUser =  LoginHandler.getCurrentUser()\n\n        const options = {\n            url: `${apiUrl}/reminder/all/${currentUser._id}`,\n            method: 'GET'\n        }\n        const res = await axios(options)\n\n        Scheduler.scheduleAllUpdates(res.data)\n\n        return res.data\n        \n\n    }\n\n    return {\n        createReminder: createReminder,\n        editReminder: editReminder,\n        deleteReminder: deleteReminder,\n        getAllReminders: getAllReminders,\n        updateReminders: updateReminders,\n        setUpdateReminderCallback: setUpdateReminderCallback,\n    }\n\n})(); \n\nexport default ReminderHandler;","/home/josiah-eakle/Dev/Full-Apps/reminders/client/src/modules/TimeZoneHandler.js",["118"],"\nconst axios = require('axios')\n\nconst TimeZoneHandler = (() => {\n\n    let timezoneData = [\"Africa/Abidjan\",\"Africa/Accra\",\"Africa/Algiers\",\"Africa/Bissau\",\"Africa/Cairo\",\"Africa/Casablanca\",\"Africa/Ceuta\",\"Africa/El_Aaiun\",\"Africa/Johannesburg\",\"Africa/Juba\",\"Africa/Khartoum\",\"Africa/Lagos\",\"Africa/Maputo\",\"Africa/Monrovia\",\"Africa/Nairobi\",\"Africa/Ndjamena\",\"Africa/Sao_Tome\",\"Africa/Tripoli\",\"Africa/Tunis\",\"Africa/Windhoek\",\"America/Adak\",\"America/Anchorage\",\"America/Araguaina\",\"America/Argentina/Buenos_Aires\",\"America/Argentina/Catamarca\",\"America/Argentina/Cordoba\",\"America/Argentina/Jujuy\",\"America/Argentina/La_Rioja\",\"America/Argentina/Mendoza\",\"America/Argentina/Rio_Gallegos\",\"America/Argentina/Salta\",\"America/Argentina/San_Juan\",\"America/Argentina/San_Luis\",\"America/Argentina/Tucuman\",\"America/Argentina/Ushuaia\",\"America/Asuncion\",\"America/Atikokan\",\"America/Bahia\",\"America/Bahia_Banderas\",\"America/Barbados\",\"America/Belem\",\"America/Belize\",\"America/Blanc-Sablon\",\"America/Boa_Vista\",\"America/Bogota\",\"America/Boise\",\"America/Cambridge_Bay\",\"America/Campo_Grande\",\"America/Cancun\",\"America/Caracas\",\"America/Cayenne\",\"America/Chicago\",\"America/Chihuahua\",\"America/Costa_Rica\",\"America/Creston\",\"America/Cuiaba\",\"America/Curacao\",\"America/Danmarkshavn\",\"America/Dawson\",\"America/Dawson_Creek\",\"America/Denver\",\"America/Detroit\",\"America/Edmonton\",\"America/Eirunepe\",\"America/El_Salvador\",\"America/Fort_Nelson\",\"America/Fortaleza\",\"America/Glace_Bay\",\"America/Goose_Bay\",\"America/Grand_Turk\",\"America/Guatemala\",\"America/Guayaquil\",\"America/Guyana\",\"America/Halifax\",\"America/Havana\",\"America/Hermosillo\",\"America/Indiana/Indianapolis\",\"America/Indiana/Knox\",\"America/Indiana/Marengo\",\"America/Indiana/Petersburg\",\"America/Indiana/Tell_City\",\"America/Indiana/Vevay\",\"America/Indiana/Vincennes\",\"America/Indiana/Winamac\",\"America/Inuvik\",\"America/Iqaluit\",\"America/Jamaica\",\"America/Juneau\",\"America/Kentucky/Louisville\",\"America/Kentucky/Monticello\",\"America/La_Paz\",\"America/Lima\",\"America/Los_Angeles\",\"America/Maceio\",\"America/Managua\",\"America/Manaus\",\"America/Martinique\",\"America/Matamoros\",\"America/Mazatlan\",\"America/Menominee\",\"America/Merida\",\"America/Metlakatla\",\"America/Mexico_City\",\"America/Miquelon\",\"America/Moncton\",\"America/Monterrey\",\"America/Montevideo\",\"America/Nassau\",\"America/New_York\",\"America/Nipigon\",\"America/Nome\",\"America/Noronha\",\"America/North_Dakota/Beulah\",\"America/North_Dakota/Center\",\"America/North_Dakota/New_Salem\",\"America/Nuuk\",\"America/Ojinaga\",\"America/Panama\",\"America/Pangnirtung\",\"America/Paramaribo\",\"America/Phoenix\",\"America/Port-au-Prince\",\"America/Port_of_Spain\",\"America/Porto_Velho\",\"America/Puerto_Rico\",\"America/Punta_Arenas\",\"America/Rainy_River\",\"America/Rankin_Inlet\",\"America/Recife\",\"America/Regina\",\"America/Resolute\",\"America/Rio_Branco\",\"America/Santarem\",\"America/Santiago\",\"America/Santo_Domingo\",\"America/Sao_Paulo\",\"America/Scoresbysund\",\"America/Sitka\",\"America/St_Johns\",\"America/Swift_Current\",\"America/Tegucigalpa\",\"America/Thule\",\"America/Thunder_Bay\",\"America/Tijuana\",\"America/Toronto\",\"America/Vancouver\",\"America/Whitehorse\",\"America/Winnipeg\",\"America/Yakutat\",\"America/Yellowknife\",\"Antarctica/Casey\",\"Antarctica/Davis\",\"Antarctica/DumontDUrville\",\"Antarctica/Macquarie\",\"Antarctica/Mawson\",\"Antarctica/Palmer\",\"Antarctica/Rothera\",\"Antarctica/Syowa\",\"Antarctica/Troll\",\"Antarctica/Vostok\",\"Asia/Almaty\",\"Asia/Amman\",\"Asia/Anadyr\",\"Asia/Aqtau\",\"Asia/Aqtobe\",\"Asia/Ashgabat\",\"Asia/Atyrau\",\"Asia/Baghdad\",\"Asia/Baku\",\"Asia/Bangkok\",\"Asia/Barnaul\",\"Asia/Beirut\",\"Asia/Bishkek\",\"Asia/Brunei\",\"Asia/Chita\",\"Asia/Choibalsan\",\"Asia/Colombo\",\"Asia/Damascus\",\"Asia/Dhaka\",\"Asia/Dili\",\"Asia/Dubai\",\"Asia/Dushanbe\",\"Asia/Famagusta\",\"Asia/Gaza\",\"Asia/Hebron\",\"Asia/Ho_Chi_Minh\",\"Asia/Hong_Kong\",\"Asia/Hovd\",\"Asia/Irkutsk\",\"Asia/Jakarta\",\"Asia/Jayapura\",\"Asia/Jerusalem\",\"Asia/Kabul\",\"Asia/Kamchatka\",\"Asia/Karachi\",\"Asia/Kathmandu\",\"Asia/Khandyga\",\"Asia/Kolkata\",\"Asia/Krasnoyarsk\",\"Asia/Kuala_Lumpur\",\"Asia/Kuching\",\"Asia/Macau\",\"Asia/Magadan\",\"Asia/Makassar\",\"Asia/Manila\",\"Asia/Nicosia\",\"Asia/Novokuznetsk\",\"Asia/Novosibirsk\",\"Asia/Omsk\",\"Asia/Oral\",\"Asia/Pontianak\",\"Asia/Pyongyang\",\"Asia/Qatar\",\"Asia/Qostanay\",\"Asia/Qyzylorda\",\"Asia/Riyadh\",\"Asia/Sakhalin\",\"Asia/Samarkand\",\"Asia/Seoul\",\"Asia/Shanghai\",\"Asia/Singapore\",\"Asia/Srednekolymsk\",\"Asia/Taipei\",\"Asia/Tashkent\",\"Asia/Tbilisi\",\"Asia/Tehran\",\"Asia/Thimphu\",\"Asia/Tokyo\",\"Asia/Tomsk\",\"Asia/Ulaanbaatar\",\"Asia/Urumqi\",\"Asia/Ust-Nera\",\"Asia/Vladivostok\",\"Asia/Yakutsk\",\"Asia/Yangon\",\"Asia/Yekaterinburg\",\"Asia/Yerevan\",\"Atlantic/Azores\",\"Atlantic/Bermuda\",\"Atlantic/Canary\",\"Atlantic/Cape_Verde\",\"Atlantic/Faroe\",\"Atlantic/Madeira\",\"Atlantic/Reykjavik\",\"Atlantic/South_Georgia\",\"Atlantic/Stanley\",\"Australia/Adelaide\",\"Australia/Brisbane\",\"Australia/Broken_Hill\",\"Australia/Currie\",\"Australia/Darwin\",\"Australia/Eucla\",\"Australia/Hobart\",\"Australia/Lindeman\",\"Australia/Lord_Howe\",\"Australia/Melbourne\",\"Australia/Perth\",\"Australia/Sydney\",\"CET\",\"CST6CDT\",\"EET\",\"EST\",\"EST5EDT\",\"Etc/GMT\",\"Etc/GMT+1\",\"Etc/GMT+10\",\"Etc/GMT+11\",\"Etc/GMT+12\",\"Etc/GMT+2\",\"Etc/GMT+3\",\"Etc/GMT+4\",\"Etc/GMT+5\",\"Etc/GMT+6\",\"Etc/GMT+7\",\"Etc/GMT+8\",\"Etc/GMT+9\",\"Etc/GMT-1\",\"Etc/GMT-10\",\"Etc/GMT-11\",\"Etc/GMT-12\",\"Etc/GMT-13\",\"Etc/GMT-14\",\"Etc/GMT-2\",\"Etc/GMT-3\",\"Etc/GMT-4\",\"Etc/GMT-5\",\"Etc/GMT-6\",\"Etc/GMT-7\",\"Etc/GMT-8\",\"Etc/GMT-9\",\"Etc/UTC\",\"Europe/Amsterdam\",\"Europe/Andorra\",\"Europe/Astrakhan\",\"Europe/Athens\",\"Europe/Belgrade\",\"Europe/Berlin\",\"Europe/Brussels\",\"Europe/Bucharest\",\"Europe/Budapest\",\"Europe/Chisinau\",\"Europe/Copenhagen\",\"Europe/Dublin\",\"Europe/Gibraltar\",\"Europe/Helsinki\",\"Europe/Istanbul\",\"Europe/Kaliningrad\",\"Europe/Kiev\",\"Europe/Kirov\",\"Europe/Lisbon\",\"Europe/London\",\"Europe/Luxembourg\",\"Europe/Madrid\",\"Europe/Malta\",\"Europe/Minsk\",\"Europe/Monaco\",\"Europe/Moscow\",\"Europe/Oslo\",\"Europe/Paris\",\"Europe/Prague\",\"Europe/Riga\",\"Europe/Rome\",\"Europe/Samara\",\"Europe/Saratov\",\"Europe/Simferopol\",\"Europe/Sofia\",\"Europe/Stockholm\",\"Europe/Tallinn\",\"Europe/Tirane\",\"Europe/Ulyanovsk\",\"Europe/Uzhgorod\",\"Europe/Vienna\",\"Europe/Vilnius\",\"Europe/Volgograd\",\"Europe/Warsaw\",\"Europe/Zaporozhye\",\"Europe/Zurich\",\"HST\",\"Indian/Chagos\",\"Indian/Christmas\",\"Indian/Cocos\",\"Indian/Kerguelen\",\"Indian/Mahe\",\"Indian/Maldives\",\"Indian/Mauritius\",\"Indian/Reunion\",\"MET\",\"MST\",\"MST7MDT\",\"PST8PDT\",\"Pacific/Apia\",\"Pacific/Auckland\",\"Pacific/Bougainville\",\"Pacific/Chatham\",\"Pacific/Chuuk\",\"Pacific/Easter\",\"Pacific/Efate\",\"Pacific/Enderbury\",\"Pacific/Fakaofo\",\"Pacific/Fiji\",\"Pacific/Funafuti\",\"Pacific/Galapagos\",\"Pacific/Gambier\",\"Pacific/Guadalcanal\",\"Pacific/Guam\",\"Pacific/Honolulu\",\"Pacific/Kiritimati\",\"Pacific/Kosrae\",\"Pacific/Kwajalein\",\"Pacific/Majuro\",\"Pacific/Marquesas\",\"Pacific/Nauru\",\"Pacific/Niue\",\"Pacific/Norfolk\",\"Pacific/Noumea\",\"Pacific/Pago_Pago\",\"Pacific/Palau\",\"Pacific/Pitcairn\",\"Pacific/Pohnpei\",\"Pacific/Port_Moresby\",\"Pacific/Rarotonga\",\"Pacific/Tahiti\",\"Pacific/Tarawa\",\"Pacific/Tongatapu\",\"Pacific/Wake\",\"Pacific/Wallis\",\"WET\"]\n    \n    // const _getTimezoneData = async () => {\n    //     const options = {\n    //         url: `http://worldtimeapi.org/api/timezone`,\n    //         method: 'GET',\n    //         headers: {\n    //             'Accept': 'application/json',\n    //         }\n    //     }\n    //     timezoneData = await axios(options)\n    // }\n\n    // _getTimezoneData();\n    \n    // const getTimeZones = async () => {\n    //     if(timezoneData && timezoneData.data) return timezoneData.data;\n    //     else {\n    //         await _getTimezoneData();\n    //         return timezoneData;\n    //     } \n    // }\n\n    const getTimeZones = () => {\n        return timezoneData;\n    }\n\n    return {\n        getTimeZones: getTimeZones\n    }\n\n\n})(); \n\nexport default TimeZoneHandler;","/home/josiah-eakle/Dev/Full-Apps/reminders/client/src/modules/VerificationHandler.js",["119","120"],"/home/josiah-eakle/Dev/Full-Apps/reminders/client/src/components/VerificationHub.js",["121","122","123"],"/home/josiah-eakle/Dev/Full-Apps/reminders/client/src/components/Reminders/ActiveReminder.js",["124","125","126","127"],"import { useEffect, useState } from 'react';\n\nimport clearIcon from \"../../media/trash.png\"\nimport editIcon from \"../../media/edit.png\"\n\nconst moment = require('moment')\n\nconst ActiveReminder = (props) => {\n    // props - reminder {reminder object}, editReminder(reminder) {callback}, deleteReminder(reminder) {callback}\n\n\n    const editReminder = () => {\n        props.editReminder(props.reminder)\n    }\n\n    const deleteReminder = () => {\n        props.deleteReminder(props.reminder)\n    }\n\n    const getDateString = (date) => {\n        let str = `${moment(date).toDate()}`\n        let strArray = str.split('GMT')\n\n        let retStr = strArray[0].slice(0, -4)\n        return (retStr)\n    }\n\n    return (\n        <div className={`ActiveReminder ${props.reminder.title}`}>\n            <div className='active-reminder-header'>\n                <span className='active-reminder-title'> \n                    {props.reminder.title}\n                </span>\n                <button onClick={deleteReminder} className='active-reminder-icon-button icon-button'> <img className='active-reminder-icon' src={clearIcon}/> </button>\n                <button onClick={editReminder} className='active-reminder-icon-button icon-button'> <img className='active-reminder-icon' src={editIcon}/> </button>\n            </div>\n            <span className='active-reminder-next-date'>\n                {`Next Reminder:  ${getDateString(props.reminder.next_date)}`}\n            </span>\n        </div>\n    );\n}\n\nexport default ActiveReminder;","/home/josiah-eakle/Dev/Full-Apps/reminders/client/src/modules/Scheduler.js",["128"],"import ReminderHandler from './ReminderHandler';\nconst schedule = require('node-schedule')\nconst moment = require('moment')\n\n\n\nconst Scheduler = (() => {\n\n    const scheduleAllUpdates  = (reminders) => {\n        reminders.forEach(r => {\n            scheduleUpdate(r)\n        })\n    }\n\n    const scheduleUpdate = (reminder) => {\n        // const dateAndTime = reminder.next_date.split('T')\n        // const reminderDate = moment.tz(`${dateAndTime[0]} ${dateAndTime[1]}`, reminder.time_zone).format()\n        let scheduleTime = moment(reminder.next_date).add(30, 'second').toDate()\n        let job = schedule.scheduleJob(scheduleTime, () => {\n            ReminderHandler.updateReminders()\n        });\n    }\n\n    return {\n        scheduleAllUpdates: scheduleAllUpdates,\n        scheduleUpdate: scheduleUpdate\n    }\n\n})();\n\nexport default Scheduler;","/home/josiah-eakle/Dev/Full-Apps/reminders/client/src/components/AccountHub.js",["129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145"],"import \"../styles/AccountHub.css\"\n\nimport checkIcon from \"../media/check.png\"\n// import notIcon from \"../media/close.png\"\nimport editIcon from \"../media/edit.png\"\nimport cancelIcon from \"../media/error.png\"\nimport { useEffect, useState } from \"react\"\nimport TimeZoneHandler from \"../modules/TimeZoneHandler.js\"\nimport LoginHandler from \"../modules/LoginHandler\"\nimport VerificationHub from \"./VerificationHub.js\"\nimport { toast } from \"react-toastify\"\n\nconst AccountHub = (props) => {\n\n    const [ isUserVerified, setUserVerified ] = useState(false) \n\n    //props - user\n\n    const [ alertMessage, setAlertMessage ] = useState(undefined)\n    const [ isDeleteModalOpen, setDeleteModalOpen ] = useState(false) \n    const [ isPassModalOpen, setPassModalOpen ] = useState(false)\n    const [ pass, setPass ] = useState(undefined)\n    const [ editValue, setEditValue ] = useState(undefined)     // EDIT VALUES - undefined, name, email, phone-number, time-zone\n    const [ updateObject, setUpdateObject ] = useState({\n        field: undefined,\n        value: undefined\n    }) \n\n\n    /* {(props.user.email_verified === true)? \n    <img src={checkIcon} alt='Verified' title='Verified' className='verified-icon' />\n    :\n        <img src={notIcon} alt=\"Not Verified\" title='Not Verified' className='verified-icon' />\n    } */\n\n    const checkUserVerification = () => {\n        setUserVerified((!!props.user.phone_number_verified && !!props.user.email_verified))\n    }\n\n    const submitUpdate = async (e) => { \n\n        e.preventDefault()\n\n        console.log(`submit update`)\n\n        let res = await LoginHandler.updateUserInfo(updateObject.field, updateObject.value);\n\n        console.log(res)\n        toast(res)\n        cancelEdit()\n    }\n\n    const updateValue = (e) => {\n        let field;\n        switch(editValue) {\n            case('name'):\n                field = 'username'\n                break;\n            case('email'):\n                field = 'email'\n                break;\n            case('phone-number'):\n                field = 'phone_number'\n                break;\n            case('time-zone'):\n                field = 'time_zone'\n                break;\n        }\n        setUpdateObject({\n            field: field,\n            value: e.target.value\n        })\n    }\n\n\n    const cancelEdit = () => {\n        setEditValue(undefined)\n    }\n\n    const updatePass = (e) => {\n        setPass(e.target.value)\n    }\n\n    const deleteUser = () => {\n        setDeleteModalOpen(true)\n    }\n\n    const yesDelete = async (e) => {\n        e.preventDefault()\n        let res = await LoginHandler.deleteUser(pass)\n        toast(res)\n        setDeleteModalOpen(false)\n    }\n\n    const noDelete = () => {\n        setDeleteModalOpen(false)    \n    }\n\n\n    const editField = (e) => {\n        \n        let str = e.target.id.split('edit-')\n        let target = str[1].split('-button')\n        target = target[0]\n        \n        setEditValue(target)\n\n    }\n\n    const importTimeZones = () => {\n        const timeZoneSelector = document.getElementById('time-zone-input')\n        let timezones = TimeZoneHandler.getTimeZones()\n        timezones.forEach(tz => {\n            const op = document.createElement('option')\n            op.value = tz\n            op.textContent = tz\n            timeZoneSelector.appendChild(op)\n        })\n\n    }\n\n    const changePassword = () => {\n        setPassModalOpen(true)\n\n    }\n\n    const updateNewPassword = (e) => {\n        setUpdateObject({\n            value: e.target.value,\n            field: \"password\"\n        })\n    }\n\n    const yesChangePass = async (e) => {\n        e.preventDefault()\n        let res = await LoginHandler.updateUserPassword(pass, updateObject.value)\n        toast(res)\n        setPassModalOpen(false)\n    }\n\n    const noChangePass = () => { \n        setPassModalOpen(false)\n    }\n\n    useEffect(() => {\n        console.log(`updateObject:`, updateObject)\n    }, [updateObject])\n\n    useEffect(() => {\n\n        console.log('editValue:', editValue)\n\n        switch(editValue) {\n            case('name'):\n                let nameInput = document.getElementById('name-input')\n                nameInput.value = props.user.username\n                setUpdateObject({\n                    field: 'username',\n                    value: props.user.username\n                })\n                break;\n            case('email'):\n                let emailInput = document.getElementById('email-input')\n                emailInput.value = props.user.email\n                setUpdateObject({\n                    field: 'email',\n                    value: props.user.email\n                })\n                break;\n            case('phone-number'):\n                let phoneInput = document.getElementById('phone-input')\n                phoneInput.value = props.user.phone_number\n                setUpdateObject({\n                    field: 'phone_number',\n                    value: props.user.phone_number\n                })\n                \n                break;\n            case('time-zone'):\n                importTimeZones()\n                let timeZoneInput = document.getElementById('time-zone-input')\n                timeZoneInput.value = props.user.time_zone\n                setUpdateObject({\n                    field: 'time_zone',\n                    value: props.user.time_zone\n                })\n\n                break;\n        }\n    }, [editValue])\n\n    useEffect(() => {\n        checkUserVerification()\n    }, [])\n\n    return (\n        <div className='AccountHub'>\n\n            {(isDeleteModalOpen === true)? \n                <div className='verify-modal-background'>\n                    <div className='verify-modal'>\n                        <div className='verify-delete-modal-header'> To delete your account, enter your password.  </div>\n\n                        <form onSubmit={yesDelete}>\n                            <div className='verify-delete-modal-button-container'>\n                                <label htmlFor='password-verification'>Password</label>\n                                <input type='password' id='password-verification' className='login-input' onChange={updatePass}></input>\n                                <button type='submit' onClick={yesDelete} className='verify-delete-modal-button' id='yes-delete-button'> Delete </button>\n                                <button onClick={noDelete} className='verify-delete-modal-button' id='no-delete-button'> Cancel </button>\n                            </div>\n                        </form>\n                    </div> \n                </div>\n            :null}\n            {(isPassModalOpen === true)?\n                <div className='verify-modal-background'>\n                    <div className='verify-modal'>\n                        <div className='verify-delete-modal-header change-pass-header'> To change your password, enter your old password.  </div>\n\n                        <div className='verify-delete-modal-button-container'>\n                            <form onSubmit={yesChangePass}>\n                                <div className='align-vertical'>\n                                    <label htmlFor='password-verification'>Old Password</label>\n                                    <input type='password' id='password-verification' className='login-input' onChange={updatePass}></input>\n                                    <label htmlFor='password-verification'>New Password</label>\n                                    <input type='password' id='password-verification' className='login-input' onChange={updateNewPassword}></input>\n                                    <button type='submit' onClick={yesChangePass} className='verify-delete-modal-button change-pass-button' id='yes-change-button'> Update Password </button>\n                                    <button onClick={noChangePass} className='verify-delete-modal-button change-pass-button' id='no-change-button'> Cancel </button>\n                                </div>\n                            </form>\n                            {/* <div className='align-vertical space-between'>\n                            </div>    */}\n                        </div>\n                    </div> \n                </div>\n            :null}\n\n\n            <div className='account-hub-header'>\n                Account\n            </div>\n\n            {(alertMessage)?\n                <div className='account-alert-message'>\n                    {alertMessage}\n                </div>\n            : null }\n\n            {(isUserVerified === false) ? <VerificationHub user={props.user} /> : null}\n\n\n            <div className='account-name-container account-container'>\n                {/* NAME */}\n                <div id='account-name-label' className='account-label'>\n                    Name\n                        {(editValue !== 'name')?\n                            <div className='account-icon-container' >\n                                <button title='Edit'  onClick={editField} className='active-reminder-icon-button icon-button' id='edit-name-button'> \n                                    <img className='active-reminder-icon' id='edit-name-button' src={editIcon}/> \n                                </button>\n                            </div>\n\n                        :\n                            <div className='account-icon-container editing'>\n                                <button title='Update' onClick={submitUpdate} className='active-reminder-icon-button icon-button' id='update-button'> \n                                    <img className='active-reminder-icon' id='update-button' src={checkIcon}/> \n                                </button>             \n                                <button title='Cancel' onClick={cancelEdit} className='active-reminder-icon-button icon-button' id='cancel-button'> \n                                    <img className='active-reminder-icon' id='cancel-button' src={cancelIcon}/> \n                                </button> \n                            </div>\n\n\n                        }\n                </div>\n                {(editValue === 'name') ? \n                    <form onSubmit={submitUpdate} >\n                        <input className='login-input' onChange={updateValue} id='name-input' name='Display Name' type='text' autoComplete='username' required={true}></input>\n                    </form>\n                : \n                    <span id='account-name'>{(props.user)?`${props.user.username}`:null}</span>\n                }\n            </div>\n            <div className='account-email-container account-container'>\n                {/* EMAIL */}\n                <div id='account-email-label' className='account-label'>Email\n\n                    {(editValue !== 'email')?\n                        <div className='account-icon-container' >\n                            <button title='Edit'  onClick={editField} className='active-reminder-icon-button icon-button' id='edit-email-button'> \n                                <img className='active-reminder-icon' id='edit-email-button' src={editIcon}/> \n                            </button>\n                        </div>\n\n                    :\n                    <div className='account-icon-container editing'>\n                        <button title='Update' onClick={submitUpdate} className='active-reminder-icon-button icon-button' id='update-button'> \n                            <img className='active-reminder-icon' id='update-button' src={checkIcon}/> \n                        </button>             \n                        <button title='Cancel' onClick={cancelEdit} className='active-reminder-icon-button icon-button' id='cancel-button'> \n                            <img className='active-reminder-icon' id='cancel-button' src={cancelIcon}/> \n                        </button> \n                    </div>\n                    }\n\n\n                </div>\n                {(editValue === 'email') ? \n                    <form onSubmit={submitUpdate} >\n                        <input className='login-input' onChange={updateValue} id='email-input' name='Email' type='email' autoComplete='email' required={true}></input>\n                    </form>\n                : \n                    <span id='account-email'>{(props.user)?`${props.user.email}`:null}</span>\n                }\n\n                {/* {(props.user.email_verified===false)?\n                    <button id='verify-email-button' className='verify-button' >\n                        Verify Email\n                    </button>\n                :null} */}\n\n            </div>\n            <div className='account-phone-number-container account-container'>\n                {/* PHONE NUMBER */}\n                <div id='account-phone-number-label' className='account-label' >Phone Number\n                    \n                    {(editValue !== 'phone-number')?\n                        <div className='account-icon-container' >\n                            <button title='Edit' onClick={editField} className='active-reminder-icon-button icon-button' id='edit-phone-number-button'> \n                                <img className='active-reminder-icon' id='edit-phone-number-button' src={editIcon}/> \n                            </button>\n                        </div>\n                    :\n                    <div className='account-icon-container editing'>\n                        <button title='Update' onClick={submitUpdate} className='active-reminder-icon-button icon-button' id='update-button'> \n                            <img className='active-reminder-icon' id='update-button' src={checkIcon}/> \n                        </button>             \n                        <button title='Cancel' onClick={cancelEdit} className='active-reminder-icon-button icon-button' id='cancel-button'> \n                            <img className='active-reminder-icon' id='cancel-button' src={cancelIcon}/> \n                        </button> \n                    </div>\n                    }\n\n\n                </div>\n                {(editValue === 'phone-number') ? \n                <form onSubmit={submitUpdate} >\n                    <input className='login-input' onChange={updateValue} id='phone-input' name='Phone Number' type='tel' autoComplete='tel' required={true}></input>\n                </form>\n                : \n                    <span id='account-phone-number account-container'>\n                        {(props.user)?`${props.user.phone_number}`:null}\n                    </span>\n                }\n                {/* {(props.user.email_verified===false)?\n                    <button id='verify-email-button' className='verify-button' >\n                        Verify Email\n                    </button>\n                :null} */}\n            </div>\n            <div className='account-timezone-container account-container'>\n                {/* TIME ZONE */}\n                <div id='account-time-zone-label' className='account-label'>\n                    Time Zone\n\n\n                        {(editValue !== 'time-zone')?\n                        <div className='account-icon-container' >\n                            <button title='Edit' onClick={editField} className='active-reminder-icon-button icon-button' id='edit-time-zone-button'> \n                                <img className='active-reminder-icon'  id='edit-time-zone-button' src={editIcon}/> \n                            </button>\n                        </div>\n                        :\n                        <div className='account-icon-container editing'>\n                            <button title='Update' onClick={submitUpdate} className='active-reminder-icon-button icon-button' id='update-button'> \n                                <img className='active-reminder-icon' id='update-button' src={checkIcon}/> \n                            </button>             \n                            <button title='Cancel' onClick={cancelEdit} className='active-reminder-icon-button icon-button' id='cancel-button'> \n                                <img className='active-reminder-icon' id='cancel-button' src={cancelIcon}/> \n                            </button> \n                        </div>\n\n                        }\n\n\n                </div>\n                {(editValue === 'time-zone') ? \n                <form onSubmit={submitUpdate} >\n                    <select className='login-input' onChange={updateValue} name='Time Zone' id='time-zone-input'>\n                        <option value='UTC'> --select timezone-- </option>\n                    </select>\n                </form>\n                : \n                    <span id='account-time-zone'>{(props.user)?`${props.user.time_zone}`:null}</span>\n                }\n\n            </div>\n            <div className='align-horizontal'>\n                <button onClick={changePassword} className='new-reminder-input button account-button' id='change-password-button' > Change Password </button>\n                <button onClick={LoginHandler.logoutUser} className='new-reminder-input button account-button' id='logout-button' > Logout </button>\n            </div>\n            <button onClick={deleteUser} className='new-reminder-input button account-button' id='delete-account-button' > Delete Account </button>\n\n            {/* <button onClick={LoginHandler.logoutUser} className='new-reminder-input button' id='logout-button' > Logout </button> */}\n\n        </div>\n    )\n}\n\nexport default AccountHub",{"ruleId":"146","severity":1,"message":"147","line":8,"column":8,"nodeType":"148","messageId":"149","endLine":8,"endColumn":23},{"ruleId":"150","replacedBy":"151"},{"ruleId":"152","replacedBy":"153"},{"ruleId":"146","severity":1,"message":"154","line":2,"column":10,"nodeType":"148","messageId":"149","endLine":2,"endColumn":19},{"ruleId":"155","severity":1,"message":"156","line":58,"column":6,"nodeType":"157","endLine":58,"endColumn":12,"suggestions":"158"},{"ruleId":"155","severity":1,"message":"159","line":59,"column":8,"nodeType":"157","endLine":59,"endColumn":10,"suggestions":"160"},{"ruleId":"161","severity":1,"message":"162","line":75,"column":107,"nodeType":"163","endLine":75,"endColumn":146},{"ruleId":"146","severity":1,"message":"164","line":13,"column":27,"nodeType":"148","messageId":"149","endLine":13,"endColumn":42},{"ruleId":"165","severity":1,"message":"166","line":17,"column":9,"nodeType":"167","messageId":"168","endLine":24,"endColumn":10},{"ruleId":"169","severity":1,"message":"170","line":48,"column":28,"nodeType":"171","messageId":"172","endLine":48,"endColumn":30},{"ruleId":"146","severity":1,"message":"164","line":20,"column":27,"nodeType":"148","messageId":"149","endLine":20,"endColumn":42},{"ruleId":"165","severity":1,"message":"166","line":44,"column":9,"nodeType":"167","messageId":"168","endLine":63,"endColumn":10},{"ruleId":"169","severity":1,"message":"170","line":112,"column":28,"nodeType":"171","messageId":"172","endLine":112,"endColumn":30},{"ruleId":"146","severity":1,"message":"173","line":2,"column":10,"nodeType":"148","messageId":"149","endLine":2,"endColumn":14},{"ruleId":"146","severity":1,"message":"174","line":7,"column":8,"nodeType":"148","messageId":"149","endLine":7,"endColumn":27},{"ruleId":"146","severity":1,"message":"175","line":8,"column":8,"nodeType":"148","messageId":"149","endLine":8,"endColumn":23},{"ruleId":"146","severity":1,"message":"176","line":23,"column":12,"nodeType":"148","messageId":"149","endLine":23,"endColumn":26},{"ruleId":"165","severity":1,"message":"166","line":64,"column":9,"nodeType":"167","messageId":"168","endLine":72,"endColumn":10},{"ruleId":"165","severity":1,"message":"166","line":93,"column":9,"nodeType":"167","messageId":"168","endLine":102,"endColumn":10},{"ruleId":"155","severity":1,"message":"177","line":116,"column":8,"nodeType":"157","endLine":116,"endColumn":10,"suggestions":"178"},{"ruleId":"155","severity":1,"message":"179","line":122,"column":8,"nodeType":"157","endLine":122,"endColumn":19,"suggestions":"180"},{"ruleId":"161","severity":1,"message":"162","line":138,"column":25,"nodeType":"163","endLine":138,"endColumn":114},{"ruleId":"161","severity":1,"message":"162","line":141,"column":25,"nodeType":"163","endLine":141,"endColumn":111},{"ruleId":"181","severity":1,"message":"182","line":95,"column":17,"nodeType":"183","messageId":"184","endLine":98,"endColumn":18},{"ruleId":"146","severity":1,"message":"185","line":3,"column":10,"nodeType":"148","messageId":"149","endLine":3,"endColumn":19},{"ruleId":"146","severity":1,"message":"186","line":3,"column":8,"nodeType":"148","messageId":"149","endLine":3,"endColumn":23},{"ruleId":"146","severity":1,"message":"187","line":4,"column":8,"nodeType":"148","messageId":"149","endLine":4,"endColumn":19},{"ruleId":"165","severity":1,"message":"166","line":33,"column":9,"nodeType":"167","messageId":"168","endLine":49,"endColumn":10},{"ruleId":"155","severity":1,"message":"188","line":124,"column":8,"nodeType":"157","endLine":124,"endColumn":25,"suggestions":"189"},{"ruleId":"155","severity":1,"message":"190","line":139,"column":8,"nodeType":"157","endLine":139,"endColumn":15,"suggestions":"191"},{"ruleId":"161","severity":1,"message":"162","line":149,"column":29,"nodeType":"163","endLine":149,"endColumn":83},{"ruleId":"146","severity":1,"message":"154","line":1,"column":10,"nodeType":"148","messageId":"149","endLine":1,"endColumn":19},{"ruleId":"146","severity":1,"message":"192","line":2,"column":8,"nodeType":"148","messageId":"149","endLine":2,"endColumn":13},{"ruleId":"146","severity":1,"message":"193","line":2,"column":7,"nodeType":"148","messageId":"149","endLine":2,"endColumn":12},{"ruleId":"181","severity":1,"message":"182","line":79,"column":36,"nodeType":"183","messageId":"184","endLine":79,"endColumn":73},{"ruleId":"181","severity":1,"message":"182","line":98,"column":36,"nodeType":"183","messageId":"184","endLine":98,"endColumn":73},{"ruleId":"146","severity":1,"message":"194","line":2,"column":10,"nodeType":"148","messageId":"149","endLine":2,"endColumn":15},{"ruleId":"165","severity":1,"message":"166","line":32,"column":9,"nodeType":"167","messageId":"168","endLine":53,"endColumn":10},{"ruleId":"155","severity":1,"message":"195","line":71,"column":8,"nodeType":"157","endLine":71,"endColumn":10,"suggestions":"196"},{"ruleId":"146","severity":1,"message":"185","line":1,"column":10,"nodeType":"148","messageId":"149","endLine":1,"endColumn":19},{"ruleId":"146","severity":1,"message":"197","line":1,"column":21,"nodeType":"148","messageId":"149","endLine":1,"endColumn":29},{"ruleId":"161","severity":1,"message":"162","line":34,"column":103,"nodeType":"163","endLine":34,"endColumn":158},{"ruleId":"161","severity":1,"message":"162","line":35,"column":101,"nodeType":"163","endLine":35,"endColumn":155},{"ruleId":"146","severity":1,"message":"198","line":19,"column":13,"nodeType":"148","messageId":"149","endLine":19,"endColumn":16},{"ruleId":"146","severity":1,"message":"164","line":19,"column":27,"nodeType":"148","messageId":"149","endLine":19,"endColumn":42},{"ruleId":"165","severity":1,"message":"166","line":55,"column":9,"nodeType":"167","messageId":"168","endLine":68,"endColumn":10},{"ruleId":"165","severity":1,"message":"166","line":153,"column":9,"nodeType":"167","messageId":"168","endLine":189,"endColumn":10},{"ruleId":"155","severity":1,"message":"199","line":190,"column":8,"nodeType":"157","endLine":190,"endColumn":19,"suggestions":"200"},{"ruleId":"155","severity":1,"message":"201","line":194,"column":8,"nodeType":"157","endLine":194,"endColumn":10,"suggestions":"202"},{"ruleId":"161","severity":1,"message":"162","line":259,"column":37,"nodeType":"163","endLine":259,"endColumn":113},{"ruleId":"161","severity":1,"message":"162","line":266,"column":37,"nodeType":"163","endLine":266,"endColumn":111},{"ruleId":"161","severity":1,"message":"162","line":269,"column":37,"nodeType":"163","endLine":269,"endColumn":112},{"ruleId":"161","severity":1,"message":"162","line":291,"column":33,"nodeType":"163","endLine":291,"endColumn":110},{"ruleId":"161","severity":1,"message":"162","line":298,"column":29,"nodeType":"163","endLine":298,"endColumn":103},{"ruleId":"161","severity":1,"message":"162","line":301,"column":29,"nodeType":"163","endLine":301,"endColumn":104},{"ruleId":"161","severity":1,"message":"162","line":330,"column":33,"nodeType":"163","endLine":330,"endColumn":117},{"ruleId":"161","severity":1,"message":"162","line":336,"column":29,"nodeType":"163","endLine":336,"endColumn":103},{"ruleId":"161","severity":1,"message":"162","line":339,"column":29,"nodeType":"163","endLine":339,"endColumn":104},{"ruleId":"161","severity":1,"message":"162","line":370,"column":33,"nodeType":"163","endLine":370,"endColumn":115},{"ruleId":"161","severity":1,"message":"162","line":376,"column":33,"nodeType":"163","endLine":376,"endColumn":107},{"ruleId":"161","severity":1,"message":"162","line":379,"column":33,"nodeType":"163","endLine":379,"endColumn":108},"no-unused-vars","'reportWebVitals' is defined but never used.","Identifier","unusedVar","no-native-reassign",["203"],"no-negated-in-lhs",["204"],"'Component' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'updateLoggedInStatus'. Either include it or remove the dependency array.","ArrayExpression",["205"],"React Hook useEffect has a missing dependency: 'animateNextLetter'. Either include it or remove the dependency array.",["206"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'setAlertMessage' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Link' is defined but never used.","'VerificationHandler' is defined but never used.","'VerificationHub' is defined but never used.","'isUserVerified' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'updateIntroText'. Either include it or remove the dependency array.",["207"],"React Hook useEffect has missing dependencies: 'animateNextLetter' and 'fullIntroText'. Either include them or remove the dependency array.",["208"],"no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","'useEffect' is defined but never used.","'TimeZoneHandler' is defined but never used.","'ReminderHub' is defined but never used.","React Hook useEffect has a missing dependency: 'updateEditValues'. Either include it or remove the dependency array.",["209"],"React Hook useEffect has missing dependencies: 'cancelEdit' and 'updateEditValues'. Either include them or remove the dependency array.",["210"],"'Login' is defined but never used.","'axios' is assigned a value but never used.","'toast' is defined but never used.","React Hook useEffect has missing dependencies: 'props.user.email_verified' and 'props.user.phone_number_verified'. Either include them or remove the dependency array. If 'setPhoneVerified' needs the current value of 'props.user.phone_number_verified', you can also switch to useReducer instead of useState and read 'props.user.phone_number_verified' in the reducer.",["211"],"'useState' is defined but never used.","'job' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.user.email', 'props.user.phone_number', 'props.user.time_zone', and 'props.user.username'. Either include them or remove the dependency array. If 'setUpdateObject' needs the current value of 'props.user.username', you can also switch to useReducer instead of useState and read 'props.user.username' in the reducer.",["212"],"React Hook useEffect has a missing dependency: 'checkUserVerification'. Either include it or remove the dependency array.",["213"],"no-global-assign","no-unsafe-negation",{"desc":"214","fix":"215"},{"desc":"216","fix":"217"},{"desc":"218","fix":"219"},{"desc":"220","fix":"221"},{"desc":"222","fix":"223"},{"desc":"224","fix":"225"},{"desc":"226","fix":"227"},{"desc":"228","fix":"229"},{"desc":"230","fix":"231"},"Update the dependencies array to be: [updateLoggedInStatus, user]",{"range":"232","text":"233"},"Update the dependencies array to be: [animateNextLetter]",{"range":"234","text":"235"},"Update the dependencies array to be: [updateIntroText]",{"range":"236","text":"237"},"Update the dependencies array to be: [animateNextLetter, fullIntroText, introText]",{"range":"238","text":"239"},"Update the dependencies array to be: [editingReminder, updateEditValues]",{"range":"240","text":"241"},"Update the dependencies array to be: [cancelEdit, props, updateEditValues]",{"range":"242","text":"243"},"Update the dependencies array to be: [props.user.email_verified, props.user.phone_number_verified]",{"range":"244","text":"245"},"Update the dependencies array to be: [editValue, props.user.email, props.user.phone_number, props.user.time_zone, props.user.username]",{"range":"246","text":"247"},"Update the dependencies array to be: [checkUserVerification]",{"range":"248","text":"249"},[1438,1444],"[updateLoggedInStatus, user]",[1952,1954],"[animateNextLetter]",[4287,4289],"[updateIntroText]",[4400,4411],"[animateNextLetter, fullIntroText, introText]",[3911,3928],"[editingReminder, updateEditValues]",[4286,4293],"[cancelEdit, props, updateEditValues]",[2232,2234],"[props.user.email_verified, props.user.phone_number_verified]",[5380,5391],"[editValue, props.user.email, props.user.phone_number, props.user.time_zone, props.user.username]",[5455,5457],"[checkUserVerification]"]